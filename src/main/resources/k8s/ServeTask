---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    bussanq.com/version: v1.0
    bussanq.com/gateway: false
    bussanq.com/modelport: "#(port ?? 80)"
    bussanq.com/model: "qwen2.5:0.5b"
  labels:
    app: kubewolf
    kubewolf: ServeTask
    kubewolfResourceId: #(task_id)
  name: #(task_name)
  namespace: #(namespace ?? "default")
spec:
  replicas: #(replicas)
  selector:
    matchLabels:
      kubewolfResourceId: #(task_id)
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        bussanq.com/pod: servepod
      labels:
        app: kubewolf
        kubewolfResourceId: #(task_id)
    spec:
      tolerations:
      - key: "bussanq.com/run"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
        - image: '#(image)'
          #if(cmd)
          command:
           - sh
           - -c
           - #(cmd)
          #end
          imagePullPolicy: IfNotPresent
          name: #(task_name)
          resources:
            limits:
              memory: #(mem ?? 16000)Mi
              #if(gpu)
              #(gpuPluginType): #(gpu)
              #end
            requests:
              cpu: #(cpu ?? 500)m
              memory: #(mem ?? 500)Mi
              #if(gpu)
              #(gpuPluginType): #(gpu)
              #end
          volumeMounts:
            - mountPath: /etc/localtime
              name: localtime
              readOnly: true
            #if(model_path)
            - name: model
              mountPath: #(model_path)
            #end
            #if(code_repo)
            - mountPath: #(mount_path)
              name: code-sync
            #end
          #if(env)
          env:
            #for(x : env.split(";"))
            - name: "#(x.split(":")[0])"
              value: "#(x.substring(x.indexOf(":")+1))"
            #end
          #end
      #if(code_repo)
      initContainers:
      - env:
        - name: SYNC_REPO
          value: #(code_repo)
        - name: SYNC_ROOT
          value: /code
        image: #(image_repo)/kubewolf-runtime:latest
        imagePullPolicy: IfNotPresent
        name: runtime
        resources: {}
        volumeMounts:
        - mountPath: /code
          name: code-sync
      #end
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      volumes:
        - hostPath:
            path: /etc/localtime
            type: ''
          name: localtime
        #if(model_path)
        - name: model
          persistentVolumeClaim:
            claimName: model
        #end
        - emptyDir: {}
          name: code-sync
---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubewolfResourceId: #(task_id)
  name: #(task_name)
  namespace: #(namespace ?? "default")
spec:
  ports:
    - name: appservice
      port: #(port ?? 80)
      protocol: TCP
      targetPort: #(port ?? 80)
  selector:
    kubewolfResourceId: #(task_id)
  type: ClusterIP